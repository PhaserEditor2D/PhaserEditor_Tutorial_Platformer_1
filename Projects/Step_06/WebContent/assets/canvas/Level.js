// -- user code here --

/* --- start generated code --- */

// Generated by Phaser Editor 1.4.3 (Phaser v2.6.2)


/**
 * Level.
 */
function Level() {
	
	Phaser.State.call(this);
	
}

/** @type Phaser.State */
var Level_proto = Object.create(Phaser.State.prototype);
Level.prototype = Level_proto;
Level.prototype.constructor = Level;

Level.prototype.init = function () {
	
	this.scale.scaleMode = Phaser.ScaleManager.SHOW_ALL;
	this.scale.pageAlignHorizontally = true;
	this.scale.pageAlignVertically = true;
	this.stage.backgroundColor = '#0080ff';
	
};

Level.prototype.preload = function () {
	
	this.load.pack('level', 'assets/pack.json');
	
};

Level.prototype.create = function () {
	
	this.initScene();
	
	this.add.sprite(-52, -108, 'BG');
	
	this.add.tileSprite(256, 279, 384, 93, 'tiles', '14');
	
	this.add.sprite(640, 279, 'tiles', '15');
	
	this.add.sprite(128, 279, 'tiles', '13');
	
	var _player = this.add.sprite(320, 71, 'player', 0);
	_player.anchor.setTo(0.5, 0.0);
	_player.animations.add('walk', [8, 9, 10, 11], 6, true);
	_player.animations.add('jump', [4, 5], 6, true);
	_player.animations.add('idle', [0, 1, 2], 4, true);
	this.game.physics.arcade.enable(_player);
	_player.body.setSize(86.39996337890625, 85.96431732177734, 46.800018310546875, 109.2168960571289);
	
	var _collisionLayer = this.add.physicsGroup(Phaser.Physics.ARCADE);
	
	this.add.tileSprite(135, 283, 631, 30, 'tiles', 'physics', _collisionLayer);
	
	_collisionLayer.setAll("body.immovable", true);
	_collisionLayer.setAll("body.allowGravity", false);
	_collisionLayer.setAll("renderable", false);
	
	
	// public fields
	
	this.fPlayer = _player;
	this.fCollisionLayer = _collisionLayer;
	
};

/* --- end generated code --- */

Level.prototype.initScene = function() {
	// start the Arcade system
	this.game.physics.startSystem(Phaser.Physics.ARCADE);

	// set the global gravity
	this.game.physics.arcade.gravity.y = 800;

	// create the cursors
	this.cursors = this.input.keyboard.createCursorKeys();
};

Level.prototype.update = function() {
	this.physics.arcade.collide(this.fPlayer, this.fCollisionLayer);

	if (this.cursors.left.isDown) {
		// move to the left
		this.fPlayer.body.velocity.x = -200;
	} else if (this.cursors.right.isDown) {
		// move to the right
		this.fPlayer.body.velocity.x = 200;
	} else {
		// dont move in the horizontal
		this.fPlayer.body.velocity.x = 0;
	}

	// a flag to know if the player is (down) touching the platforms
	var touching = this.fPlayer.body.touching.down;

	if (touching && this.cursors.up.isDown) {
		// jump if the player is on top of a platform and the up key is pressed
		this.fPlayer.body.velocity.y = -600;
	}
	
	if (touching) {
	    if (this.fPlayer.body.velocity.x == 0) {
	        // if it is not moving horizontally play the idle
	        this.fPlayer.play("idle");
	    } else {
	        // if it is moving play the walk
	        this.fPlayer.play("walk");
	    }
	} else {
	    // it is not touching the platforms so it means it is jumping.
	    this.fPlayer.play("jump");
	}
	
	// update the facing of the player
	if (this.cursors.left.isDown) {
	    // face left
	    this.fPlayer.scale.x = -1;
	} else if (this.cursors.right.isDown) {
	   // face right
	   this.fPlayer.scale.x = 1;
	}
	
};

